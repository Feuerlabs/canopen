@author  Tony Rogvall <tony@rogvall.se>
@author  Malotte W Lönne <malotte@malotte.net>
@version 1.0
@title Erlang CANopen stack
@doc CANopen is an industry standard for managing small embedded nodes
in a CAN network.


See  <a href="http://www.canopensolutions.com/index.html" target="_blank">Canopen</a> for a detailed description of CANopen.

== Installation ==
Installation is described in the canopen README at github:
<a href="http://github.com/tonyrog/canopen" target="_blank">README</a>

== General ==

The heart of our CANopen implementation is a CoNode. It listens to the CAN bus and acts when a relevant CAN frame is received.<br/>
It has an object dictionary where objects can be stored, deleted and updated.<br/>
The initial dictionary is loaded from a file given as an argument at start up.<br/>

The CoNode is prepared to handle:
<ul>
<li> SDOs - A sdo session process is started to handle the request.</li>
<li> TPDOs - If TPDOs are defined in the dictionary separate TPDO processes are started to handle these.</li>
<li> RPDOs - The RPDO is unpacked and the affected objects updated.</li>
<li> DAM-MPDOs - Notifying subscribing applications. </li>
<li> SAM-MPDOs - Notifying subscribing applications. </li>
<li> NMT requests - Execute state changes.</li>
<li> NODE GUARD - Supervision based on GuardTime and LifeFactor defined in dictionary.</li>
<li> SYNC pulses - Forwards them to connected TPDO processes.</li>
<li> EMERGENCY requests - Not supported yet.</li>
<li> TIME STAMPS - Not supported yet.</li>
<li> LSS requests - Not supported yet.</li>
</ul>

=== Applications ===
The application interface is described in a User's Guide found at the canopen wiki on github:
<a href="http://github.com/tonyrog/canopen/wiki/howto_write_canopen_app" target="_blank">How to write a CANopen application</a>

=== Manager ===
If you need a CANopen manager you can use the co_mgr interface, see {@link co_mgr}. It will start a CoNode with NodeId 0.

== Implementation ==

=== Process structure ===
<img src="../doc/canopen_process_structure.jpg"> </img>

=== Modules ===
====Header files ====
<ul>
<li> canopen - Definitions, for example of records used as loop_data in various processes. <a href="../include/canopen.hrl">`canopen.hrl'</a> </li>
<li> sdo - Definitions of SDO PDUs.  <a href="../include/sdo.hrl">`sdo.hrl'</a> </li>
<li> co_app - Definitions needed for applications wanting to attach to the CANopen node co_node. <a href="../include/co_app.hrl">`co_app.hrl'</a> </li>
<li> co_debug - Debug macro. <a href="../include/co_debug.hrl">`co_debug.hrl'</a></li>
</ul>
=== Source files ===
<ul>
<li> canopen - CANopen application. Starts the CANopen supervisor.</li>
<li> canopen_sup - CANopen supervisor. Starts the CANopen node (co_node).</li>
<li> co_api - Interface to the CANopen node (co_node).</li>
<li> co_node - CANopen node. Processes CANopen frames.</li>
<li> co_mgr - CANopen manager interface. </li>
<li> co_nmt - Implements an NMT master if a node is configured to be that.</li>
<li> co_os_app - Application that implements support for OS_COMMAD, index 16#1023 </li>
<li> co_file - Loads symbolic entries from a file. </li>
<li> co_dict - Accesses the CANopen internal object dictionary. </li>
<li> co_sdo_srv_fsm - State machine handling an SDO RX interchange. </li>
<li> co_sdo_cli_fsm - State machine handling an SDO TX interchange. </li>
<li> co_session - Common functions for SDO interchange. </li>
<li> co_data_buf - Intermediate data storage during an SDO interchange.</li>
<li> co_sdo - Encode/decode of SDO frames to erlang records. </li>
<li> co_tpdo - Process managing one TPDO. </li>
<li> co_set_fsm - State machine for transmitting data from an RPDO to an application.</li>
<li> co_app - Behaviour for an application using the {atomic, Module} transfer mode.. </li>
<li> co_stream_app - Behaviour for an application using the {streamed, Module} transfer mode.. </li>
<li> co_codec - CANbit encoding and decoding. </li> 
<li> co_lib - Support functions. </li> 
<li> co_crc - Checksum calculation. </li>
<li> co_iset - Integer set. </li>
<li> co_probe - For tracing. CANopen probe. </li>
<li> co_format - For tracing. Converts CANopen records to readable form. </li>
</ul>
